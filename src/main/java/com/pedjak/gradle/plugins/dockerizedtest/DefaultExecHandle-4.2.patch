--- DefaultExecHandle.java	2017-09-22 17:35:13.000000000 +0200
+++ DockerizedExecHandle.java	2017-09-25 18:24:38.000000000 +0200
@@ -12,33 +12,44 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.gradle.process.internal;
+package com.pedjak.gradle.plugins.dockerizedtest;
 
 import com.google.common.base.Joiner;
-import net.rubygrapefruit.platform.ProcessLauncher;
+
+import com.github.dockerjava.api.DockerClient;
+import com.github.dockerjava.api.command.CreateContainerCmd;
+import com.github.dockerjava.api.model.*;
+import com.github.dockerjava.core.command.AttachContainerResultCallback;
+import com.github.dockerjava.core.command.WaitContainerResultCallback;
+import groovy.lang.Closure;
 import org.gradle.api.logging.Logger;
 import org.gradle.api.logging.Logging;
+import org.gradle.internal.UncheckedException;
 import org.gradle.internal.concurrent.DefaultExecutorFactory;
-import org.gradle.internal.concurrent.StoppableExecutor;
-import org.gradle.internal.nativeintegration.services.NativeServices;
+import org.gradle.internal.concurrent.ManagedExecutor;
 import org.gradle.internal.event.ListenerBroadcast;
+import org.gradle.internal.nativeintegration.services.NativeServices;
+import org.gradle.internal.operations.BuildOperationIdentifierPreservingRunnable;
 import org.gradle.process.ExecResult;
+import org.gradle.process.internal.*;
 import org.gradle.process.internal.shutdown.ShutdownHookActionRegister;
 import org.gradle.process.internal.streams.StreamsHandler;
 
-import java.io.File;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
+import javax.annotation.Nullable;
+import java.io.*;
+import java.util.*;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
+import static java.lang.String.format;
+
 /**
  * Default implementation for the ExecHandle interface.
  *
  * <h3>State flows</h3>
  *
@@ -52,22 +63,27 @@
  * <ul>
  * <li>{@link #start()} allowed when state is INIT</li>
  * <li>{@link #abort()} allowed when state is STARTED or DETACHED</li>
  * </ul>
  */
-public class DefaultExecHandle implements ExecHandle, ProcessSettings {
-    private static final Logger LOGGER = Logging.getLogger(DefaultExecHandle.class);
+public class DockerizedExecHandle implements ExecHandle, ProcessSettings
+{
+
+    private static final Logger LOGGER = Logging.getLogger(DockerizedExecHandle.class);
 
     private final String displayName;
+
     /**
      * The working directory of the process.
      */
     private final File directory;
+
     /**
      * The executable to run.
      */
     private final String command;
+
     /**
      * Arguments to pass to the executable.
      */
     private final List<String> arguments;
 
@@ -75,41 +91,41 @@
      * The variables to set in the environment the executable is run in.
      */
     private final Map<String, String> environment;
     private final StreamsHandler streamsHandler;
     private final boolean redirectErrorStream;
-    private final ProcessLauncher processLauncher;
     private final DefaultExecutorFactory executorFactory = new DefaultExecutorFactory();
     private int timeoutMillis;
     private boolean daemon;
 
     /**
      * Lock to guard all mutable state
      */
     private final Lock lock;
+    private final Condition stateChanged;
 
-    private final Condition condition;
-
-    private final StoppableExecutor executor;
+    private final ManagedExecutor executor;
 
     /**
      * State of this ExecHandle.
      */
     private ExecHandleState state;
 
     /**
      * When not null, the runnable that is waiting
      */
-    private ExecHandleRunner execHandleRunner;
+    private DockerizedExecHandleRunner execHandleRunner;
 
     private ExecResultImpl execResult;
 
     private final ListenerBroadcast<ExecHandleListener> broadcast;
 
     private final ExecHandleShutdownHookAction shutdownHookAction;
 
-    DefaultExecHandle(String displayName, File directory, String command, List<String> arguments,
+    private final DockerizedTestExtension testExtension;
+
+    public DockerizedExecHandle(DockerizedTestExtension testExtension, String displayName, File directory, String command, List<String> arguments,
                       Map<String, String> environment, StreamsHandler streamsHandler,
                       List<ExecHandleListener> listeners, boolean redirectErrorStream, int timeoutMillis, boolean daemon) {
         this.displayName = displayName;
         this.directory = directory;
         this.command = command;
@@ -118,14 +134,14 @@
         this.streamsHandler = streamsHandler;
         this.redirectErrorStream = redirectErrorStream;
         this.timeoutMillis = timeoutMillis;
         this.daemon = daemon;
         this.lock = new ReentrantLock();
-        this.condition = lock.newCondition();
+        this.stateChanged = lock.newCondition();
         this.state = ExecHandleState.INIT;
-        executor = executorFactory.create(String.format("Run %s", displayName));
-        processLauncher = NativeServices.getInstance().get(ProcessLauncher.class);
+        this.testExtension = testExtension;
+        executor = executorFactory.create(format("Run %s", displayName));
         shutdownHookAction = new ExecHandleShutdownHookAction(this);
         broadcast = new ListenerBroadcast<ExecHandleListener>(ExecHandleListener.class);
         broadcast.addAll(listeners);
     }
 
@@ -166,11 +182,11 @@
     private void setState(ExecHandleState state) {
         lock.lock();
         try {
             LOGGER.debug("Changing state to: {}", state);
             this.state = state;
-            this.condition.signalAll();
+            this.stateChanged.signalAll();
         } finally {
             lock.unlock();
         }
     }
 
@@ -184,60 +200,66 @@
     }
 
     private void setEndStateInfo(ExecHandleState newState, int exitValue, Throwable failureCause) {
         ShutdownHookActionRegister.removeAction(shutdownHookAction);
 
-        ExecResultImpl result;
         ExecHandleState currentState;
         lock.lock();
         try {
             currentState = this.state;
-            ExecException wrappedException = null;
-            if (failureCause != null) {
-                if (currentState == ExecHandleState.STARTING) {
-                    wrappedException = new ExecException(String.format("A problem occurred starting process '%s'",
-                            displayName), failureCause);
-                } else {
-                    wrappedException = new ExecException(String.format(
-                            "A problem occurred waiting for process '%s' to complete.", displayName), failureCause);
-                }
-            }
             setState(newState);
-            execResult = new ExecResultImpl(exitValue, wrappedException, displayName);
-            result = execResult;
+            ExecResultImpl newResult = new ExecResultImpl(exitValue, execExceptionFor(failureCause, currentState), displayName);
+            if (execResult != null) {
+                String message = "Attempted to overwrite exec result: " + execResult + " -> " + newResult;
+                throw execExceptionFor(new RuntimeException(message), currentState);
+            }
+            this.execResult = newResult;
         } finally {
             lock.unlock();
         }
 
         LOGGER.debug("Process '{}' finished with exit value {} (state: {})", displayName, exitValue, newState);
 
         if (currentState != ExecHandleState.DETACHED && newState != ExecHandleState.DETACHED) {
-            broadcast.getSource().executionFinished(this, result);
+            broadcast.getSource().executionFinished(this, execResult);
         }
         executor.requestStop();
     }
 
+    @Nullable
+    private ExecException execExceptionFor(Throwable failureCause, ExecHandleState currentState) {
+        return failureCause != null
+            ? new ExecException(failureMessageFor(currentState), failureCause)
+            : null;
+    }
+
+    private String failureMessageFor(ExecHandleState currentState) {
+        return currentState == ExecHandleState.STARTING
+            ? format("A problem occurred starting process '%s'", displayName)
+            : format("A problem occurred waiting for process '%s' to complete.", displayName);
+    }
+
     public ExecHandle start() {
         LOGGER.info("Starting process '{}'. Working directory: {} Command: {}",
                 displayName, directory, command + ' ' + Joiner.on(' ').useForNull("null").join(arguments));
         if (LOGGER.isDebugEnabled()) {
             LOGGER.debug("Environment for process '{}': {}", displayName, environment);
         }
         lock.lock();
         try {
             if (!stateIn(ExecHandleState.INIT)) {
-                throw new IllegalStateException(String.format("Cannot start process '%s' because it has already been started", displayName));
+                throw new IllegalStateException(format("Cannot start process '%s' because it has already been started", displayName));
             }
             setState(ExecHandleState.STARTING);
 
-            execHandleRunner = new ExecHandleRunner(this, streamsHandler, processLauncher, executorFactory);
-            executor.execute(execHandleRunner);
+            execHandleRunner = new DockerizedExecHandleRunner(this, streamsHandler, runContainer(), executorFactory);
+            executor.execute(new BuildOperationIdentifierPreservingRunnable(execHandleRunner));
 
-            while(stateIn(ExecHandleState.STARTING)) {
+            while (stateIn(ExecHandleState.STARTING)) {
                 LOGGER.debug("Waiting until process started: {}.", displayName);
                 try {
-                    condition.await();
+                    stateChanged.await();
                 } catch (InterruptedException e) {
                     //ok, wrapping up
                 }
             }
 
@@ -253,15 +275,16 @@
     }
 
     public void abort() {
         lock.lock();
         try {
-            if (state == ExecHandleState.SUCCEEDED || state == ExecHandleState.FAILED || state == ExecHandleState.ABORTED) {
+            if (stateIn(ExecHandleState.SUCCEEDED, ExecHandleState.FAILED, ExecHandleState.ABORTED)) {
                 return;
             }
             if (!stateIn(ExecHandleState.STARTED, ExecHandleState.DETACHED)) {
-                throw new IllegalStateException(String.format("Cannot abort process '%s' because it is not in started or detached state", displayName));
+                throw new IllegalStateException(
+                    format("Cannot abort process '%s' because it is not in started or detached state", displayName));
             }
             this.execHandleRunner.abortProcess();
             this.waitForFinish();
         } finally {
             lock.unlock();
@@ -271,13 +294,14 @@
     public ExecResult waitForFinish() {
         lock.lock();
         try {
             while (!stateIn(ExecHandleState.SUCCEEDED, ExecHandleState.ABORTED, ExecHandleState.FAILED, ExecHandleState.DETACHED)) {
                 try {
-                    condition.await();
+                    stateChanged.await();
                 } catch (InterruptedException e) {
                     //ok, wrapping up...
+                    throw UncheckedException.throwAsUncheckedException(e);
                 }
             }
         } finally {
             lock.unlock();
         }
@@ -288,12 +312,11 @@
     }
 
     private ExecResult result() {
         lock.lock();
         try {
-            execResult.rethrowFailure();
-            return execResult;
+            return execResult.rethrowFailure();
         } finally {
             lock.unlock();
         }
     }
 
@@ -345,29 +368,116 @@
 
     public int getTimeout() {
         return timeoutMillis;
     }
 
+    private DockerClient getClient() {
+        Object clientOrClosure = testExtension.getClient();
+        if (DockerClient.class.isAssignableFrom(clientOrClosure.getClass())) {
+            return (DockerClient) clientOrClosure;
+        } else {
+            return (DockerClient) ((Closure) clientOrClosure).call();
+        }
+
+    }
+
+    private Process runContainer() {
+        try
+        {
+            DockerClient client = getClient();
+            CreateContainerCmd createCmd = client.createContainerCmd(testExtension.getImage().toString())
+                    .withTty(false)
+                    .withStdinOpen(true)
+                    .withStdInOnce(true)
+                    .withWorkingDir(directory.getAbsolutePath());
+
+            createCmd.withEnv(getEnv());
+
+            String user = testExtension.getUser();
+            if (user != null)
+                createCmd.withUser(user);
+            bindVolumes(createCmd);
+            List<String> cmdLine = new ArrayList<String>();
+            cmdLine.add(command);
+            cmdLine.addAll(arguments);
+            createCmd.withCmd(cmdLine);
+
+            invokeIfNotNull(testExtension.getBeforeContainerCreate(), createCmd, client);
+            String containerId = createCmd.exec().getId();
+            invokeIfNotNull(testExtension.getAfterContainerCreate(), containerId, client);
+
+            invokeIfNotNull(testExtension.getBeforeContainerStart(), containerId, client);
+            client.startContainerCmd(containerId).exec();
+            invokeIfNotNull(testExtension.getAfterContainerStart(), containerId, client);
+
+            if (!client.inspectContainerCmd(containerId).exec().getState().getRunning()) {
+                throw new RuntimeException("Container "+containerId+" not running!");
+            }
+
+            Process proc = new DockerizedProcess(client, containerId, testExtension.getAfterContainerStop());
+
+            return proc;
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException(e);
+        }
+    }
+
+    private void invokeIfNotNull(Closure closure, Object... args) {
+        if (closure != null) {
+            int l = closure.getParameterTypes().length;
+            Object[] nargs;
+            if (l < args.length) {
+                nargs = new Object[l];
+                System.arraycopy(args, 0, nargs, 0, l);
+            } else {
+                nargs = args;
+            }
+            closure.call(nargs);
+        }
+    }
+    private List<String> getEnv() {
+        List<String> env = new ArrayList<String>();
+        for (Map.Entry<String, String> e: environment.entrySet()) {
+            env.add(e.getKey()+"="+e.getValue());
+        }
+        return env;
+    }
+
+    private void bindVolumes(CreateContainerCmd cmd) {
+        List<Volume> volumes = new ArrayList<Volume>();
+        List<Bind> binds = new ArrayList<Bind>();
+        for (Iterator it = testExtension.getVolumes().entrySet().iterator(); it.hasNext(); ) {
+            Map.Entry<Object, Object> e = (Map.Entry<Object, Object>) it.next();
+            Volume volume = new Volume(e.getValue().toString());
+            Bind bind = new Bind(e.getKey().toString(), volume);
+            binds.add(bind);
+            volumes.add(volume);
+        }
+        cmd.withVolumes(volumes).withBinds(binds);
+    }
+
     private static class ExecResultImpl implements ExecResult {
         private final int exitValue;
         private final ExecException failure;
         private final String displayName;
 
-        public ExecResultImpl(int exitValue, ExecException failure, String displayName) {
+        ExecResultImpl(int exitValue, ExecException failure, String displayName) {
             this.exitValue = exitValue;
             this.failure = failure;
             this.displayName = displayName;
         }
 
         public int getExitValue() {
             return exitValue;
         }
 
         public ExecResult assertNormalExitValue() throws ExecException {
-            if (exitValue != 0) {
-                throw new ExecException(String.format("Process '%s' finished with non-zero exit value %d", displayName, exitValue));
-            }
+            // all exit values are ok
+//            if (exitValue != 0) {
+//                throw new ExecException(format("Process '%s' finished with non-zero exit value %d", displayName, exitValue));
+//            }
             return this;
         }
 
         public ExecResult rethrowFailure() throws ExecException {
             if (failure != null) {
@@ -379,6 +489,111 @@
         @Override
         public String toString() {
             return "{exitValue=" + exitValue + ", failure=" + failure + "}";
         }
     }
+
+    private class DockerizedProcess extends Process {
+
+        private final DockerClient dockerClient;
+        private final String containerId;
+        private final Closure afterContainerStop;
+
+        private final PipedOutputStream stdInWriteStream = new PipedOutputStream();
+        private final PipedInputStream stdOutReadStream = new PipedInputStream();
+        private final PipedInputStream stdErrReadStream = new PipedInputStream();
+        private final PipedInputStream stdInReadStream = new PipedInputStream(stdInWriteStream);
+        private final PipedOutputStream stdOutWriteStream = new PipedOutputStream(stdOutReadStream);
+        private final PipedOutputStream stdErrWriteStream = new PipedOutputStream(stdErrReadStream);
+
+        private final CountDownLatch finished = new CountDownLatch(1);
+        private AtomicInteger exitCode = new AtomicInteger();
+        private final AttachContainerResultCallback attachContainerResultCallback = new AttachContainerResultCallback() {
+            @Override public void onNext(Frame frame)
+            {
+                try
+                {
+                    if (frame.getStreamType().equals(StreamType.STDOUT))
+                    {
+                        stdOutWriteStream.write(frame.getPayload());
+                    } else if (frame.getStreamType().equals(StreamType.STDERR)) {
+                        stdErrWriteStream.write(frame.getPayload());
+                    }
+                } catch (Exception e) {
+                    LOGGER.error("Error while writing to stream:", e);
+                }
+                super.onNext(frame);
+            }
+        };
+
+        public DockerizedProcess(final DockerClient dockerClient, final String containerId, final Closure afterContainerStop) throws Exception
+        {
+            this.dockerClient = dockerClient;
+            this.containerId = containerId;
+            this.afterContainerStop = afterContainerStop;
+            attachStreams();
+            dockerClient.waitContainerCmd(containerId).exec(new WaitContainerResultCallback() {
+                @Override public void onNext(WaitResponse waitResponse)
+                {
+                    exitCode.set(waitResponse.getStatusCode());
+                    try
+                    {
+                        attachContainerResultCallback.close();
+                        attachContainerResultCallback.awaitCompletion();
+                        stdOutWriteStream.close();
+                        stdErrWriteStream.close();
+                    } catch (Exception e) {
+                        LOGGER.debug("Error by detaching streams", e);
+                    } finally
+                    {
+                        finished.countDown();
+                        invokeIfNotNull(afterContainerStop, containerId, dockerClient);
+                    }
+
+
+                }
+            });
+        }
+
+        private void attachStreams() throws Exception {
+            dockerClient.attachContainerCmd(containerId)
+                    .withFollowStream(true)
+                    .withStdOut(true)
+                    .withStdErr(true)
+                    .withStdIn(stdInReadStream)
+                    .exec(attachContainerResultCallback);
+        }
+
+        @Override public OutputStream getOutputStream()
+        {
+            return stdInWriteStream;
+        }
+
+        @Override public InputStream getInputStream()
+        {
+            return stdOutReadStream;
+        }
+
+        @Override public InputStream getErrorStream()
+        {
+            return stdErrReadStream;
+        }
+
+        @Override public int waitFor() throws InterruptedException
+        {
+            finished.await();
+            return exitCode.get();
+        }
+
+        @Override public int exitValue()
+        {
+            if (finished.getCount() > 0) throw new IllegalThreadStateException("docker process still running");
+            return exitCode.get();
+        }
+
+        @Override public void destroy()
+        {
+            dockerClient.killContainerCmd(containerId).exec();
+        }
+    }
+
 }
